// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestJob.DAL.Data;

#nullable disable

namespace TestJob.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestJob.DAL.Models.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d672157a-9b75-4ba0-9ec1-3284bb8480dc"),
                            CreateDate = new DateTime(2022, 11, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectName = "Project 1",
                            UpdateDate = new DateTime(2022, 11, 24, 13, 26, 46, 655, DateTimeKind.Local).AddTicks(847)
                        },
                        new
                        {
                            Id = new Guid("24f49fa2-a80f-4471-b8c8-ea2e0e6b1f2e"),
                            CreateDate = new DateTime(2022, 11, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectName = "Project 2",
                            UpdateDate = new DateTime(2022, 11, 24, 12, 26, 46, 655, DateTimeKind.Local).AddTicks(858)
                        },
                        new
                        {
                            Id = new Guid("c868fb18-23f9-4db0-baf1-5ef9d658b97f"),
                            CreateDate = new DateTime(2022, 11, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectName = "Project 3",
                            UpdateDate = new DateTime(2022, 11, 24, 11, 26, 46, 655, DateTimeKind.Local).AddTicks(861)
                        });
                });

            modelBuilder.Entity("TestJob.DAL.Models.TaskCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CommentType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fffb3703-ef7a-410f-8e28-af11c7f42c30"),
                            CommentType = (byte)1,
                            Content = new byte[] { 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33 },
                            TaskId = new Guid("bb7fcec9-9190-4a55-a9ec-bb692a9006b1")
                        },
                        new
                        {
                            Id = new Guid("0392ced5-9e92-4a67-b58b-2ee11ef03c46"),
                            CommentType = (byte)1,
                            Content = new byte[] { 65, 100, 100, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 },
                            TaskId = new Guid("eb99502a-d91f-4858-bb96-232fcb0a3f86")
                        },
                        new
                        {
                            Id = new Guid("a25ce494-8637-4020-a1bc-b0880c20d01a"),
                            CommentType = (byte)1,
                            Content = new byte[] { 69, 120, 112, 108, 111, 114, 101, 32, 71, 114, 97, 112, 104, 81, 76 },
                            TaskId = new Guid("37e270f2-0d92-4148-90e0-24ad465c4b87")
                        },
                        new
                        {
                            Id = new Guid("3fa8d8d8-04a9-4d95-8513-5f96a549800f"),
                            CommentType = (byte)1,
                            Content = new byte[] { 69, 120, 112, 108, 111, 114, 101, 32, 82, 97, 98, 98, 105, 116, 77, 81 },
                            TaskId = new Guid("1f1f8d2f-f684-4bd0-a126-2f59856c8efe")
                        },
                        new
                        {
                            Id = new Guid("3f237ecc-8441-4b58-8b18-f13933a8b54a"),
                            CommentType = (byte)1,
                            Content = new byte[] { 69, 120, 112, 108, 111, 114, 101, 32, 68, 73, 44, 32, 73, 111, 67, 32, 97, 110, 100, 32, 109, 105, 100, 100, 108, 101, 119, 97, 114, 101 },
                            TaskId = new Guid("cb23a37c-7b81-4a33-82bd-e58888224e51")
                        },
                        new
                        {
                            Id = new Guid("40ad3b73-55f1-4676-bf3b-f43c134178f5"),
                            CommentType = (byte)1,
                            Content = new byte[] { 69, 120, 112, 108, 111, 114, 101, 32, 75, 97, 102, 107, 97 },
                            TaskId = new Guid("d7667adf-3155-49b1-80b4-d586b31a5aae")
                        },
                        new
                        {
                            Id = new Guid("cabac605-e821-4b6f-9651-f2260c8c5aaa"),
                            CommentType = (byte)1,
                            Content = new byte[] { 46, 78, 69, 84, 32, 77, 65, 85, 73, 63, 63, 63 },
                            TaskId = new Guid("40e6fb67-bc64-4c73-880d-9eccac4e691b")
                        },
                        new
                        {
                            Id = new Guid("cad59826-b319-4ae2-9978-7ef7b1ef883e"),
                            CommentType = (byte)1,
                            Content = new byte[] { 68, 66, 32, 73, 110, 100, 101, 120, 101, 115, 32, 40, 83, 81, 76, 32, 83, 101, 114, 118, 101, 114, 41 },
                            TaskId = new Guid("8d733e85-a506-471f-aa60-1d6414e22d53")
                        },
                        new
                        {
                            Id = new Guid("a651f1aa-f1d2-40b2-9c75-bccb92cd80ef"),
                            CommentType = (byte)1,
                            Content = new byte[] { 68, 66, 32, 73, 110, 100, 101, 120, 101, 115, 32, 40, 80, 111, 115, 116, 103, 114, 101, 83, 81, 76, 41 },
                            TaskId = new Guid("8d733e85-a506-471f-aa60-1d6414e22d53")
                        },
                        new
                        {
                            Id = new Guid("08f5a218-0608-43c1-98ef-311387bd77cd"),
                            CommentType = (byte)1,
                            Content = new byte[] { 68, 66, 32, 73, 110, 100, 101, 120, 101, 115, 32, 40, 77, 121, 83, 81, 76, 41 },
                            TaskId = new Guid("8d733e85-a506-471f-aa60-1d6414e22d53")
                        },
                        new
                        {
                            Id = new Guid("fac39cfb-f171-42b9-ab0a-07550782d4f1"),
                            CommentType = (byte)1,
                            Content = new byte[] { 84, 101, 115, 116, 32, 99, 111, 109, 109, 101, 110, 116 },
                            TaskId = new Guid("bb7fcec9-9190-4a55-a9ec-bb692a9006b1")
                        },
                        new
                        {
                            Id = new Guid("164cbd88-0bd9-4c01-938b-09dab24804cd"),
                            CommentType = (byte)1,
                            Content = new byte[] { 65, 83, 80, 46, 78, 69, 84, 32, 67, 111, 114, 101, 32, 55 },
                            TaskId = new Guid("40e6fb67-bc64-4c73-880d-9eccac4e691b")
                        });
                });

            modelBuilder.Entity("TestJob.DAL.Models.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb7fcec9-9190-4a55-a9ec-bb692a9006b1"),
                            CancelDate = new DateTime(2022, 11, 24, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 24, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("d672157a-9b75-4ba0-9ec1-3284bb8480dc"),
                            StartDate = new DateTime(2022, 11, 24, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 1",
                            UpdateDate = new DateTime(2022, 11, 24, 3, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("eb99502a-d91f-4858-bb96-232fcb0a3f86"),
                            CancelDate = new DateTime(2022, 11, 22, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 22, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("c868fb18-23f9-4db0-baf1-5ef9d658b97f"),
                            StartDate = new DateTime(2022, 11, 22, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 2",
                            UpdateDate = new DateTime(2022, 11, 22, 3, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("37e270f2-0d92-4148-90e0-24ad465c4b87"),
                            CancelDate = new DateTime(2022, 11, 23, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 23, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("24f49fa2-a80f-4471-b8c8-ea2e0e6b1f2e"),
                            StartDate = new DateTime(2022, 11, 23, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 3",
                            UpdateDate = new DateTime(2022, 11, 23, 3, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("1f1f8d2f-f684-4bd0-a126-2f59856c8efe"),
                            CancelDate = new DateTime(2022, 11, 24, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 24, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("d672157a-9b75-4ba0-9ec1-3284bb8480dc"),
                            StartDate = new DateTime(2022, 11, 24, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 4",
                            UpdateDate = new DateTime(2022, 11, 24, 3, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("cb23a37c-7b81-4a33-82bd-e58888224e51"),
                            CancelDate = new DateTime(2022, 11, 23, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 23, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("24f49fa2-a80f-4471-b8c8-ea2e0e6b1f2e"),
                            StartDate = new DateTime(2022, 11, 23, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 5",
                            UpdateDate = new DateTime(2022, 11, 23, 3, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("d7667adf-3155-49b1-80b4-d586b31a5aae"),
                            CancelDate = new DateTime(2022, 11, 23, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 23, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("24f49fa2-a80f-4471-b8c8-ea2e0e6b1f2e"),
                            StartDate = new DateTime(2022, 11, 23, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 6",
                            UpdateDate = new DateTime(2022, 11, 23, 3, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("40e6fb67-bc64-4c73-880d-9eccac4e691b"),
                            CancelDate = new DateTime(2022, 11, 22, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 22, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("c868fb18-23f9-4db0-baf1-5ef9d658b97f"),
                            StartDate = new DateTime(2022, 11, 22, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 7",
                            UpdateDate = new DateTime(2022, 11, 22, 3, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("8d733e85-a506-471f-aa60-1d6414e22d53"),
                            CancelDate = new DateTime(2022, 11, 24, 5, 0, 0, 0, DateTimeKind.Local),
                            CreateDate = new DateTime(2022, 11, 24, 1, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = new Guid("d672157a-9b75-4ba0-9ec1-3284bb8480dc"),
                            StartDate = new DateTime(2022, 11, 24, 2, 0, 0, 0, DateTimeKind.Local),
                            TaskName = "Task 8",
                            UpdateDate = new DateTime(2022, 11, 24, 3, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("TestJob.DAL.Models.TaskCommentEntity", b =>
                {
                    b.HasOne("TestJob.DAL.Models.TaskEntity", "TaskModel")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskModel");
                });

            modelBuilder.Entity("TestJob.DAL.Models.TaskEntity", b =>
                {
                    b.HasOne("TestJob.DAL.Models.ProjectEntity", "ProjectModel")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("TestJob.DAL.Models.ProjectEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TestJob.DAL.Models.TaskEntity", b =>
                {
                    b.Navigation("TaskComments");
                });
#pragma warning restore 612, 618
        }
    }
}
